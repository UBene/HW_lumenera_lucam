'''
Created on Apr 4, 2022

@author: Benedikt Ursprung
'''
import numpy as np

ContrastModes = ['signalOverReference', 'differenceOverSum', 'signalOnly']


def calculateContrast(contrastMode, signal, background):
    # Calculates contrast based on the user's chosen contrast mode (configured
    # in the experiment config file e.g. ESRconfig, Rabiconfig, etc)
    if contrastMode == "signalOverReference":
        return np.divide(signal, background)
    elif contrastMode == "differenceOverSum":
        return np.divide(
            np.subtract(signal, background), np.add(signal, background)
        )
    elif contrastMode == "signalOnly":
        return signal


channel_settings = [
    dict(name='DAQ_sig', initial=1, colors=['#32CA32'],
         description='channel used to generate the pulses fed to the DAQ to gate/act to trigger signal.'),
    dict(name='DAQ_ref', initial=0, colors=['#7CFC00'],
         description='channel used to generate the pulses fed to the DAQ to gate/act to trigger signal.'),
    dict(name='AOM', initial=2, colors=['b'],
         description='channel connected to the TTL input of the switch used to switch on and off the radio-frequency drive to the Acousto Optic Modulator (AOM).'),
    dict(name='uW', initial=3, colors=['#FFA500'],
         description='channel connected to the TTL input of the switch used to switch on and off the microwaves generated by the SRS microwave signal generator.'),
    dict(name='I', initial=4, colors=['#A52A2A'],
         description='channel connected to the I (or "in phase") input of the SRS microwave signal generator.',),
    dict(name='Q', initial=5, colors=['#A020F0'],
         description='channel connected to the Q (or "in quadrature") input of the SRS microwave signal generator.'),
    dict(name='sync_out', initial=23, colors=['#FFFF28'],
         description='channel to synchronize external clocks, such as uW generator. (Not strictly required for most ODMR experiment)'),
]
