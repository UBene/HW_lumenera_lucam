# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.6
#
# <auto-generated>
#
# Generated from file `RemoteSpm.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module RemoteSpmRPC
_M_RemoteSpmRPC = Ice.openModule('RemoteSpmRPC')
__name__ = 'RemoteSpmRPC'

_M_RemoteSpmRPC._t_RemoteSpm = IcePy.defineValue('::RemoteSpmRPC::RemoteSpm', Ice.Value, -1, (), False, True, None, ())

if 'RemoteSpmPrx' not in _M_RemoteSpmRPC.__dict__:
    _M_RemoteSpmRPC.RemoteSpmPrx = Ice.createTempClass()
    print('RemoteSpmPrx reached')
    class RemoteSpmPrx(Ice.ObjectPrx):

        def setProperty(self, prop, val, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_setProperty.invoke(self, ((prop, val), context))

        def setPropertyAsync(self, prop, val, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_setProperty.invokeAsync(self, ((prop, val), context))

        def begin_setProperty(self, prop, val, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_setProperty.begin(self, ((prop, val), _response, _ex, _sent, context))

        def end_setProperty(self, _r):
            return _M_RemoteSpmRPC.RemoteSpm._op_setProperty.end(self, _r)

        def setAdapter(self, name, identity, params, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_setAdapter.invoke(self, ((name, identity, params), context))

        def setAdapterAsync(self, name, identity, params, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_setAdapter.invokeAsync(self, ((name, identity, params), context))

        def begin_setAdapter(self, name, identity, params, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_setAdapter.begin(self, ((name, identity, params), _response, _ex, _sent, context))

        def end_setAdapter(self, _r):
            return _M_RemoteSpmRPC.RemoteSpm._op_setAdapter.end(self, _r)

        def start(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_start.invoke(self, ((), context))

        def startAsync(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_start.invokeAsync(self, ((), context))

        def begin_start(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_start.begin(self, ((), _response, _ex, _sent, context))

        def end_start(self, _r):
            return _M_RemoteSpmRPC.RemoteSpm._op_start.end(self, _r)

        def destroy(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_destroy.invoke(self, ((), context))

        def destroyAsync(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_destroy.invokeAsync(self, ((), context))

        def begin_destroy(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_destroy.begin(self, ((), _response, _ex, _sent, context))

        def end_destroy(self, _r):
            return _M_RemoteSpmRPC.RemoteSpm._op_destroy.end(self, _r)

        def errorsCnt(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_errorsCnt.invoke(self, ((), context))

        def errorsCntAsync(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_errorsCnt.invokeAsync(self, ((), context))

        def begin_errorsCnt(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_errorsCnt.begin(self, ((), _response, _ex, _sent, context))

        def end_errorsCnt(self, _r):
            return _M_RemoteSpmRPC.RemoteSpm._op_errorsCnt.end(self, _r)

        def error(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_error.invoke(self, ((), context))

        def errorAsync(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_error.invokeAsync(self, ((), context))

        def begin_error(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_error.begin(self, ((), _response, _ex, _sent, context))

        def end_error(self, _r):
            return _M_RemoteSpmRPC.RemoteSpm._op_error.end(self, _r)

        def isIdle(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_isIdle.invoke(self, ((), context))

        def isIdleAsync(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_isIdle.invokeAsync(self, ((), context))

        def begin_isIdle(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_isIdle.begin(self, ((), _response, _ex, _sent, context))

        def end_isIdle(self, _r):
            return _M_RemoteSpmRPC.RemoteSpm._op_isIdle.end(self, _r)

        def isConnecting(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_isConnecting.invoke(self, ((), context))

        def isConnectingAsync(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_isConnecting.invokeAsync(self, ((), context))

        def begin_isConnecting(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_isConnecting.begin(self, ((), _response, _ex, _sent, context))

        def end_isConnecting(self, _r):
            return _M_RemoteSpmRPC.RemoteSpm._op_isConnecting.end(self, _r)

        def isConnected(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_isConnected.invoke(self, ((), context))

        def isConnectedAsync(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_isConnected.invokeAsync(self, ((), context))

        def begin_isConnected(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_isConnected.begin(self, ((), _response, _ex, _sent, context))

        def end_isConnected(self, _r):
            return _M_RemoteSpmRPC.RemoteSpm._op_isConnected.end(self, _r)

        def isDisconnected(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_isDisconnected.invoke(self, ((), context))

        def isDisconnectedAsync(self, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_isDisconnected.invokeAsync(self, ((), context))

        def begin_isDisconnected(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_RemoteSpmRPC.RemoteSpm._op_isDisconnected.begin(self, ((), _response, _ex, _sent, context))

        def end_isDisconnected(self, _r):
            return _M_RemoteSpmRPC.RemoteSpm._op_isDisconnected.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_RemoteSpmRPC.RemoteSpmPrx.ice_checkedCast(proxy, '::RemoteSpmRPC::RemoteSpm', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_RemoteSpmRPC.RemoteSpmPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::RemoteSpmRPC::RemoteSpm'
    _M_RemoteSpmRPC._t_RemoteSpmPrx = IcePy.defineProxy('::RemoteSpmRPC::RemoteSpm', RemoteSpmPrx)

    _M_RemoteSpmRPC.RemoteSpmPrx = RemoteSpmPrx
    del RemoteSpmPrx

    _M_RemoteSpmRPC.RemoteSpm = Ice.createTempClass()
    class RemoteSpm(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::RemoteSpmRPC::RemoteSpm')

        def ice_id(self, current=None):
            return '::RemoteSpmRPC::RemoteSpm'

        @staticmethod
        def ice_staticId():
            return '::RemoteSpmRPC::RemoteSpm'

        def setProperty(self, prop, val, current=None):
            raise NotImplementedError("servant method 'setProperty' not implemented")

        def setAdapter(self, name, identity, params, current=None):
            raise NotImplementedError("servant method 'setAdapter' not implemented")

        def start(self, current=None):
            raise NotImplementedError("servant method 'start' not implemented")

        def destroy(self, current=None):
            raise NotImplementedError("servant method 'destroy' not implemented")

        def errorsCnt(self, current=None):
            raise NotImplementedError("servant method 'errorsCnt' not implemented")

        def error(self, current=None):
            raise NotImplementedError("servant method 'error' not implemented")

        def isIdle(self, current=None):
            raise NotImplementedError("servant method 'isIdle' not implemented")

        def isConnecting(self, current=None):
            raise NotImplementedError("servant method 'isConnecting' not implemented")

        def isConnected(self, current=None):
            raise NotImplementedError("servant method 'isConnected' not implemented")

        def isDisconnected(self, current=None):
            raise NotImplementedError("servant method 'isDisconnected' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_RemoteSpmRPC._t_RemoteSpmDisp)

        __repr__ = __str__

    _M_RemoteSpmRPC._t_RemoteSpmDisp = IcePy.defineClass('::RemoteSpmRPC::RemoteSpm', RemoteSpm, (), None, ())
    RemoteSpm._ice_type = _M_RemoteSpmRPC._t_RemoteSpmDisp

    RemoteSpm._op_setProperty = IcePy.Operation('setProperty', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    RemoteSpm._op_setAdapter = IcePy.Operation('setAdapter', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    RemoteSpm._op_start = IcePy.Operation('start', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    RemoteSpm._op_destroy = IcePy.Operation('destroy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    RemoteSpm._op_errorsCnt = IcePy.Operation('errorsCnt', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    RemoteSpm._op_error = IcePy.Operation('error', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    RemoteSpm._op_isIdle = IcePy.Operation('isIdle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    RemoteSpm._op_isConnecting = IcePy.Operation('isConnecting', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    RemoteSpm._op_isConnected = IcePy.Operation('isConnected', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    RemoteSpm._op_isDisconnected = IcePy.Operation('isDisconnected', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())

    _M_RemoteSpmRPC.RemoteSpm = RemoteSpm
    del RemoteSpm

# End of module RemoteSpmRPC
