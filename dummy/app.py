from ScopeFoundry import BaseMicroscopeApp
from ScopeFoundry.helper_funcs import sibling_path, load_qt_ui_file
import logging
from ScopeFoundry.measurement import Measurement
from ScopeFoundry.hardware import HardwareComponent

logging.basicConfig(level='DEBUG')
logging.getLogger("ipykernel").setLevel(logging.WARNING)
logging.getLogger('PyQt4').setLevel(logging.WARNING)
logging.getLogger('PyQt5').setLevel(logging.WARNING)
logging.getLogger('LoggedQuantity').setLevel(logging.WARNING)
logging.getLogger('pyvisa').setLevel(logging.WARNING)


import numpy as np

class RandomNumber(Measurement):

    name = 'random_number'


    def setup(self):

        self.settings.New('factor', float, initial=2)


    def run(self):
        print('running', self.name)

        hw = self.app.hardware['random_number_generator']
        #"This self of Measurement has reference to microscope named app. hardware is dictionary of hardware contained in app"
        #If I wanted to find where "app" is defined, it is in __init__ of Measurement

        print(hw.aquire_data(self.settings['factor']))


class RandomNumberGenerator(HardwareComponent):

    name = 'random_number_generator'


    def setup(self):
        print('setup')


    def connect(self):
        print('pretend to connect')

    def disconnect(self):
        print('disconnect')


    def aquire_data(self, factor):
        return np.random.randn(1)*factor




class Microscope(BaseMicroscopeApp):
    #Some object is generated by BaseMicroscopeApp, can access the self of this object below in setup
    name = 'dummy'

    def setup(self):
        #self here comes from BaseMicroscopeApp
        self.settings_load_ini('defaults.ini')


        print("Adding Hardware Components")
        print(self.name)

        measure = RandomNumber(app=self)
        #app is needed in __init__ of Measurement. Here app is the object that was created by the initializer of BaseMicroscopeApp
        self.add_measurement(measure)

        measure = RandomNumber(app=self, name='random_number_2')
        self.add_measurement(measure)



        self.add_hardware(RandomNumberGenerator(app=self))



        


if __name__ == '__main__':
    import sys
    
    
    app = Microscope(sys.argv)
    # app2 = Microscope()
    app.settings_load_ini('defaults.ini')
    # app.load_window_positions_json(r'window_positions.json')
    sys.exit(app.exec_())
